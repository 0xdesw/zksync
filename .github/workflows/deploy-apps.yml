name: Deploy Apps

on:
  deployment:

defaults:
  run:
    shell: bash -leo pipefail {0}

env:
  DEPLOY_APPS: -l name=server -l name=prover

jobs:
  pre:
    runs-on: [k8s, stage]
    steps:
      - uses: actions/checkout@v2
      -
        id: config
        run: |
          environment=${{ github.event.deployment.environment }}
          echo "::set-output name=shortRev::$(git rev-parse --short HEAD)"
          echo "::set-output name=environment::${environment}"
      -
        uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.ref }}
          regex: '^refs\/tags\/((v[0-9]+\.[0-9]+\.[0-9])(-?.*)?)$'
      -
        name: Map runtime environment data
        id: envMap
        uses: kanga333/variable-mapper@v0.2.2
        with:
          key: ${{ steps.config.outputs.environment }}
          export_to: output
          mode: overwrite
          map: |
            {
              ".*": {
                "hfEnv": "${{ steps.config.outputs.environment }}",
                "kubeConf": "KUBECONF_STAGE",
                "runner": "stage",
                "namespace": "${{ steps.config.outputs.environment }}"
              },
              "^rinkeby$": { "kubeConf": "KUBECONF_TESTNET", "runner": "testnet" },
              "^ropsten$": { "kubeConf": "KUBECONF_TESTNET", "runner": "testnet" },
              "^mainnet$": { "kubeConf": "KUBECONF_MAINNET", "runner": "mainnet", "hfEnv": "prod", "namespace": "zksync" }
            }
      -
        name: Cancel deployment (deployment tag missmatch)
        if: ${{ steps.regex-match.outputs.group1 == '' }}
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          state: failure
          deployment_id: ${{ github.event.deployment.id }}

    outputs:
      shortRev: ${{ steps.config.outputs.shortRev }}
      environment: ${{ steps.config.outputs.environment }}
      kubeConf: ${{ steps.envMap.outputs.kubeConf }}
      hfEnv: ${{ steps.envMap.outputs.hfEnv }}
      namespace: ${{ steps.envMap.outputs.namespace }}
      runner: ${{ steps.envMap.outputs.runner }}
      isTag: ${{ steps.regex-match.outputs.group1 != '' }}
      configTag: ${{ steps.regex-match.outputs.group2 }}

  updateConfig:
    name: update config
    needs: [pre]
    runs-on: [k8s, deployer, "${{ needs.pre.outputs.runner }}"]
    container:
      image: dysnix/kubectl:v1.19-gcloud
    env:
      IMAGE_TAG: ${{ needs.pre.outputs.shortRev }}
      KUBECONF: ${{ secrets[needs.pre.outputs.kubeConf] }}
      ENVFILE: ./compiled_envs/${{ needs.pre.outputs.environment }}.env
    steps:
      -
        if: ${{ needs.pre.outputs.isTag == 'true' }}
        name: Create ~/.kube/config
        run: mkdir -p ~/.kube && echo "$KUBECONF" | base64 -d > ~/.kube/config
      -
        if: ${{ needs.pre.outputs.isTag == 'true' }}
        name: Clone configs
        uses: actions/checkout@v2
        with:
          repository: matter-labs/configs
          path: configs
          ref: ${{ needs.pre.outputs.configTag }}
          token: ${{ secrets.GH_TOKEN }}
      -
        if: ${{ needs.pre.outputs.isTag == 'true' }}
        name: Update Server Config
        working-directory: configs
        run: |
          sudo apk --no-cache add yarn
          ./bin/config
          ./bin/config compile ${{ needs.pre.outputs.environment }}
          kubectl delete configmap -n ${{ needs.pre.outputs.namespace }} server-env-custom || /bin/true
          kubectl create configmap -n ${{ needs.pre.outputs.namespace }} server-env-custom --from-env-file=${{ env.ENVFILE }}

  deploy:
    name: Deploy Apps
    runs-on: [k8s, deployer, "${{ needs.pre.outputs.runner }}"]
    needs: pre
    container:
      image: dysnix/kubectl:v1.19-gcloud
    env:
      IMAGE_TAG: ${{ needs.pre.outputs.shortRev }}
      KUBECONF: ${{ secrets[needs.pre.outputs.kubeConf] }}
      HFENV: ${{ needs.pre.outputs.hfEnv }}
    steps:
      -
        if: ${{ needs.pre.outputs.isTag == 'true' }}
        name: Create ~/.kube/config
        run: mkdir -p ~/.kube && echo "$KUBECONF" | base64 -d > ~/.kube/config
      -
        if: ${{ needs.pre.outputs.isTag == 'true' }}
        name: Clone helm-infra
        uses: actions/checkout@v2
        with:
          repository: matter-labs/helm-infra
          path: helm-infra
          token: ${{ secrets.GH_TOKEN }}
      -
        if: ${{ needs.pre.outputs.isTag == 'true' }}
        name: Deploy apps
        working-directory: helm-infra
        run: |
          ## copy helm plugins over (from dysnix/kubectl, don't forget)!!!
          cp -r /dysnix/kubectl/.local /dysnix/kubectl/.cache ~

          UPDATE_REPOS=y helmfile -e $HFENV repos
          helmfile -e $HFENV $DEPLOY_APPS apply --args "timeout 180s"
      -
        if: success() && needs.pre.outputs.isTag == 'true'
        name: Update deployment status (success)
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          state: success
          deployment_id: ${{ github.event.deployment.id }}
      -
        if: failure() && needs.pre.outputs.isTag == 'true'
        name: Update deployment status (failure)
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          state: failure
          deployment_id: ${{ github.event.deployment.id }}
      -
        if: failure() && needs.pre.outputs.isTag == 'true'
        name: Notify to Mattermost (on failure)
        uses: tferreira/matterfy@releases/v1
        with:
          type: ${{ job.status }}
          job_name: '*Deployment to "${{ steps.config.outputs.environment }}" failed*'
          icon_emoji: octocat
          channel: 'matterlabs-alerts'
          url: ${{ secrets.MATTERMOST_WEBHOOK }}
